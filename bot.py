import asyncio
import random
import time
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    CallbackQuery
)
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import aiosqlite
import aiohttp

API_TOKEN = '7687205801:AAFwYLqVIzdFgIcAu9YmIurqT-3wnolwBa4'
ADMIN_ID = 7505715359
DB_PATH = "db.sqlite3"

BTC_ADDRESS = "bc1pret37zjwelrtusq7le5urw9w9ns5lj2t5smwxmq60pxckg5cflss87jr3x"
COINMARKETCAP_API_KEY = "b2abba61-203f-4ff8-8c07-75ad4279955a"

pending_payments = {}

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# ---------------------- DATABASE SETUP AND HELPERS ----------------------

async def init_db():
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                tg_id INTEGER UNIQUE,
                orders INTEGER DEFAULT 0,
                discount REAL DEFAULT 0,
                rank TEXT DEFAULT 'buyer'
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS cities (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT UNIQUE
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS districts (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                city_id INTEGER,
                name TEXT,
                UNIQUE(city_id, name),
                FOREIGN KEY(city_id) REFERENCES cities(id)
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                city_id INTEGER,
                district_id INTEGER,
                name TEXT,
                description TEXT,
                photo_id TEXT,
                price REAL,
                product_text TEXT,
                FOREIGN KEY(city_id) REFERENCES cities(id),
                FOREIGN KEY(district_id) REFERENCES districts(id)
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS product_items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                product_id INTEGER,
                item_text TEXT,
                FOREIGN KEY(product_id) REFERENCES products(id)
            )
        ''')
        await db.commit()

async def get_user(tg_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute('SELECT * FROM users WHERE tg_id = ?', (tg_id,))
        user = await cur.fetchone()
        await cur.close()
        return user

async def add_user(tg_id: int, rank='buyer'):
    async with aiosqlite.connect(DB_PATH) as db:
        try:
            await db.execute('INSERT INTO users (tg_id, rank) VALUES (?, ?)', (tg_id, rank))
            await db.commit()
        except aiosqlite.IntegrityError:
            pass

async def update_rank(tg_id: int, rank: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('UPDATE users SET rank = ? WHERE tg_id = ?', (rank, tg_id))
        await db.commit()

async def update_user_orders_and_discount(tg_id: int, plus=1):
    async with aiosqlite.connect(DB_PATH) as db:
        # –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        await db.execute('UPDATE users SET orders = orders + ? WHERE tg_id = ?', (plus, tg_id))
        # –ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
        cur = await db.execute('SELECT orders FROM users WHERE tg_id = ?', (tg_id,))
        orders = (await cur.fetchone())[0]
        # –í—ã—Å—á–∏—Ç–∞—Ç—å —Å–∫–∏–¥–∫—É
        discount = 0
        if orders >= 200:
            discount = 15
        elif orders >= 50:
            discount = 10
        elif orders >= 20:
            discount = 5
        elif orders >= 10:
            discount = 2
        await db.execute('UPDATE users SET discount = ? WHERE tg_id = ?', (discount, tg_id))
        await db.commit()
        return orders, discount

async def get_staff():
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute('SELECT tg_id, rank FROM users WHERE rank != "buyer"')
        staff = await cur.fetchall()
        await cur.close()
        return staff

async def add_city(name: str):
    async with aiosqlite.connect(DB_PATH) as db:
        try:
            await db.execute('INSERT INTO cities (name) VALUES (?)', (name,))
            await db.commit()
        except aiosqlite.IntegrityError:
            return False
        return True

async def delete_city(city_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        # –£–¥–∞–ª—è–µ–º product_items –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –≥–æ—Ä–æ–¥–∞
        await db.execute('DELETE FROM product_items WHERE product_id IN (SELECT id FROM products WHERE city_id=?)', (city_id,))
        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≥–æ—Ä–æ–¥–∞
        await db.execute('DELETE FROM products WHERE city_id=?', (city_id,))
        # –£–¥–∞–ª—è–µ–º —Ä–∞–π–æ–Ω—ã –≥–æ—Ä–æ–¥–∞
        await db.execute('DELETE FROM districts WHERE city_id=?', (city_id,))
        # –£–¥–∞–ª—è–µ–º —Å–∞–º –≥–æ—Ä–æ–¥
        await db.execute('DELETE FROM cities WHERE id=?', (city_id,))
        await db.commit()

async def get_cities():
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute('SELECT id, name FROM cities')
        data = await cur.fetchall()
        await cur.close()
        return data

async def add_district(city_id: int, name: str):
    async with aiosqlite.connect(DB_PATH) as db:
        try:
            await db.execute('INSERT INTO districts (city_id, name) VALUES (?, ?)', (city_id, name))
            await db.commit()
        except aiosqlite.IntegrityError:
            return False
        return True

async def get_districts(city_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute('SELECT id, name FROM districts WHERE city_id = ?', (city_id,))
        data = await cur.fetchall()
        await cur.close()
        return data

async def add_product(city_id, district_id, name, description, photo_id, price, product_text):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''
            INSERT INTO products (city_id, district_id, name, description, photo_id, price, product_text)
            VALUES (?, ?, ?, ?, ?, ?, ?)''',
            (city_id, district_id, name, description, photo_id, price, product_text))
        await db.commit()

async def delete_product(product_id: int):
    import aiosqlite
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('DELETE FROM product_items WHERE product_id = ?', (product_id,))
        await db.execute('DELETE FROM products WHERE id = ?', (product_id,))
        await db.commit()
        
async def get_products(city_id, district_id):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute('''
            SELECT id, name, price FROM products
            WHERE city_id = ? AND district_id = ?
        ''', (city_id, district_id))
        data = await cur.fetchall()
        await cur.close()
        return data

async def get_product_full(product_id):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute('''
            SELECT p.id, p.name, p.description, p.photo_id, p.price, p.product_text, c.name, d.name
            FROM products p
            JOIN cities c ON p.city_id = c.id
            JOIN districts d ON p.district_id = d.id
            WHERE p.id = ?
        ''', (product_id,))
        data = await cur.fetchone()
        await cur.close()
        return data

# –≠–∫–∑–µ–º–ø–ª—è—Ä—ã —Ç–æ–≤–∞—Ä–∞ (item-–∫–æ–¥—ã)
async def add_product_items(product_id, items):
    async with aiosqlite.connect(DB_PATH) as db:
        for item in items:
            await db.execute("INSERT INTO product_items (product_id, item_text) VALUES (?, ?)", (product_id, item))
        await db.commit()

async def get_and_delete_product_item(product_id):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute('SELECT id, item_text FROM product_items WHERE product_id=? LIMIT 1', (product_id,))
        row = await cur.fetchone()
        if not row:
            return None
        item_id, item_text = row
        await db.execute('DELETE FROM product_items WHERE id=?', (item_id,))
        await db.commit()
        return item_text

async def has_items(product_id):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute('SELECT COUNT(*) FROM product_items WHERE product_id=?', (product_id,))
        count = (await cur.fetchone())[0]
        return count > 0

async def items_count(product_id):
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute('SELECT COUNT(*) FROM product_items WHERE product_id=?', (product_id,))
        count = (await cur.fetchone())[0]
        return count

# ---------------------- FSM STATES ----------------------

class AddCity(StatesGroup):
    waiting_for_city_name = State()

class AddDistrict(StatesGroup):
    waiting_for_city = State()
    waiting_for_district_name = State()

class AddProduct(StatesGroup):
    waiting_for_city = State()
    waiting_for_district = State()
    waiting_for_name = State()
    waiting_for_description = State()
    waiting_for_photo = State()
    waiting_for_price = State()
    waiting_for_product_text = State()

class BuyProduct(StatesGroup):
    waiting_for_payment_method = State()
    waiting_for_payment = State()

class StaffManage(StatesGroup):
    waiting_for_action = State()
    waiting_for_id = State()

# ---------------------- KEYBOARDS ----------------------

main_menu = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='üõçÔ∏è –¢–æ–≤–∞—Ä—ã'), KeyboardButton(text='üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç')],
        [KeyboardButton(text='‚≠ê –û—Ç–∑—ã–≤—ã'), KeyboardButton(text='üìú –ü—Ä–∞–≤–∏–ª–∞')],
        [KeyboardButton(text='üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞'), KeyboardButton(text='üåç –Ø–∑—ã–∫')]
    ],
    resize_keyboard=True
)

def admin_panel():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'), KeyboardButton(text='‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')],
            [KeyboardButton(text='üèôÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥'), KeyboardButton(text='üåÜ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–π–æ–Ω')],
            [KeyboardButton(text='üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥'), KeyboardButton(text='üßë‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º')],
            [KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥')]
        ],
        resize_keyboard=True
    )

def worker_panel():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text='‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä')],
            [KeyboardButton(text='‚¨ÖÔ∏è –ù–∞–∑–∞–¥')]
        ],
        resize_keyboard=True
    )

def staff_manage_inline():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëë –ù–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", callback_data="staff_set_admin")],
        [InlineKeyboardButton(text="üë∑ –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–∞", callback_data="staff_set_worker")],
        [InlineKeyboardButton(text="‚¨áÔ∏è –ü–æ–Ω–∏–∑–∏—Ç—å –¥–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è", callback_data="staff_set_buyer")],
        [InlineKeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="staff_show_users")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="staff_back")]
    ])

# ---------------------- START AND PROFILE ----------------------

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    tg_id = message.from_user.id
    user = await get_user(tg_id)
    if not user:
        if tg_id == ADMIN_ID:
            await add_user(tg_id, "admin")
        else:
            await add_user(tg_id)
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu
    )

@dp.message(F.text == "üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def profile(message: types.Message):
    tg_id = message.from_user.id
    user = await get_user(tg_id)
    if not user:
        await message.answer("‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ /start.")
        return

    uid, _, orders, discount, rank = user
    rank_ru = {"admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üëë", "worker": "–†–∞–±–æ—Ç–Ω–∏–∫ üë∑", "buyer": "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å üõí"}.get(rank, rank)
    markup = None
    if rank == "admin":
        markup = admin_panel()
    elif rank == "worker":
        markup = worker_panel()
    else:
        markup = main_menu

    text = (
        f"üÜî –í–∞—à –∞–π–¥–∏: <code>{tg_id}</code>\n"
        f"üì¶ –í–∞—à–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤: <b>{orders}</b>\n"
        f"üí∏ –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: <b>{discount}%</b>\n"
        f"üéñÔ∏è –í–∞—à —Ä–∞–Ω–≥: <b>{rank_ru}</b>"
    )
    await message.answer(text, parse_mode="HTML", reply_markup=markup)

# ---------------------- STAFF MANAGEMENT INLINE FSM ----------------------

@dp.message(F.text == "üßë‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º")
async def staff_manage(message: types.Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if user[4] != "admin":
        await message.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    await message.answer("üßë‚Äçüíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º:", reply_markup=staff_manage_inline())
    await state.set_state(StaffManage.waiting_for_action)

@dp.callback_query(F.data.in_(["staff_set_admin", "staff_set_worker", "staff_set_buyer"]))
async def staff_manage_choose_action(callback: CallbackQuery, state: FSMContext):
    action = callback.data
    action_map = {
        "staff_set_admin": "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º",
        "staff_set_worker": "—Ä–∞–±–æ—Ç–Ω–∏–∫–æ–º",
        "staff_set_buyer": "–ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º"
    }
    await state.update_data(staff_action=action)
    await callback.message.answer(f"–í–≤–µ–¥–∏—Ç–µ TG ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å {action_map[action]}:")
    await state.set_state(StaffManage.waiting_for_id)
    await callback.answer()

@dp.callback_query(F.data == "staff_back")
async def staff_manage_back(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.", reply_markup=admin_panel())
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data == "staff_show_users")
async def staff_show_users(callback: types.CallbackQuery, state: FSMContext):
    tg_id = callback.from_user.id
    user = await get_user(tg_id)
    if not user or user[4] != "admin":
        await callback.message.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        await callback.answer()
        return
    staff = await get_staff()
    if not staff:
        await callback.message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–Ω–≥–æ–º –≤—ã—à–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è.")
        await callback.answer()
        return
    lines = ["<b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–∞–Ω–≥–æ–º –≤—ã—à–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:</b>"]
    for uid, rank in staff:
        rank_ru = {"admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üëë", "worker": "–†–∞–±–æ—Ç–Ω–∏–∫ üë∑"}.get(rank, rank)
        lines.append(f"ID: <code>{uid}</code> | –†–∞–Ω–≥: <b>{rank_ru}</b>")
    await callback.message.answer("\n".join(lines), parse_mode="HTML")
    await callback.answer()

@dp.message(StaffManage.waiting_for_id)
async def staff_manage_set_id(message: types.Message, state: FSMContext):
    data = await state.get_data()
    action = data.get("staff_action")
    target_rank = {
        "staff_set_admin": "admin",
        "staff_set_worker": "worker",
        "staff_set_buyer": "buyer"
    }[action]
    try:
        target_id = int(message.text.strip())
    except Exception:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TG ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return
    user = await get_user(message.from_user.id)
    if not user or user[4] != "admin":
        await message.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    if target_id == message.from_user.id and target_rank == "buyer":
        await message.answer("‚õî –ù–µ–ª—å–∑—è –ø–æ–Ω–∏–∑–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
        return
    target_user = await get_user(target_id)
    if not target_user:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    await update_rank(target_id, target_rank)
    rank_ru = {"admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä üëë", "worker": "–†–∞–±–æ—Ç–Ω–∏–∫ üë∑", "buyer": "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å üõí"}[target_rank]
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target_id}</code> —Ç–µ–ø–µ—Ä—å {rank_ru}.", parse_mode="HTML", reply_markup=admin_panel())
    await state.clear()

# ---------------------- ADD CITY / DISTRICT / PRODUCT FSM ----------------------

@dp.message(F.text == "üèôÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥")
async def add_city_start(message: types.Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if user[4] != "admin":
        await message.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    await message.answer("üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
    await state.set_state(AddCity.waiting_for_city_name)

@dp.message(AddCity.waiting_for_city_name)
async def add_city_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if not name:
        await message.answer("‚õî –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    ok = await add_city(name)
    if ok:
        await message.answer("üèôÔ∏è –ì–æ—Ä–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=admin_panel())
    else:
        await message.answer("‚õî –¢–∞–∫–æ–π –≥–æ—Ä–æ–¥ —É–∂–µ –µ—Å—Ç—å.", reply_markup=admin_panel())
    await state.clear()

@dp.message(F.text == "üåÜ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–π–æ–Ω")
async def add_district_start(message: types.Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if user[4] != "admin":
        await message.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    cities = await get_cities()
    if not cities:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=name, callback_data=f"adddistrict_city_{cid}")] for cid, name in cities]
    )
    await message.answer("üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —Ä–∞–π–æ–Ω–∞:", reply_markup=kb)

@dp.callback_query(F.data.startswith("adddistrict_city_"))
async def add_district_choose_city(callback: types.CallbackQuery, state: FSMContext):
    city_id = int(callback.data.split("_")[-1])
    await state.update_data(city_id=city_id)
    await callback.message.answer("üåÜ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–π–æ–Ω–∞:")
    await state.set_state(AddDistrict.waiting_for_district_name)
    await callback.answer()

@dp.message(AddDistrict.waiting_for_district_name)
async def add_district_name(message: types.Message, state: FSMContext):
    data = await state.get_data()
    city_id = data.get("city_id")
    name = message.text.strip()
    if not name:
        await message.answer("‚õî –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
    ok = await add_district(city_id, name)
    if ok:
        await message.answer("üåÜ –†–∞–π–æ–Ω –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=admin_panel())
    else:
        await message.answer("‚õî –¢–∞–∫–æ–π —Ä–∞–π–æ–Ω —É–∂–µ –µ—Å—Ç—å.", reply_markup=admin_panel())
    await state.clear()

@dp.message(F.text.in_(["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä"]))
async def add_product_start(message: types.Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if user[4] not in ("admin", "worker"):
        await message.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    cities = await get_cities()
    if not cities:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –≥–æ—Ä–æ–¥.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=name, callback_data=f"addprod_city_{cid}")] for cid, name in cities]
    )
    await message.answer("üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=kb)

@dp.callback_query(F.data.startswith("addprod_city_"))
async def add_product_choose_city(callback: types.CallbackQuery, state: FSMContext):
    city_id = int(callback.data.split("_")[-1])
    await state.update_data(city_id=city_id)
    districts = await get_districts(city_id)
    if not districts:
        await callback.message.answer("–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç —Ä–∞–π–æ–Ω–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Ä–∞–π–æ–Ω.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=name, callback_data=f"addprod_district_{did}")] for did, name in districts]
    )
    await callback.message.answer("üåÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=kb)
    await callback.answer()

@dp.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥")
async def delete_city_start(message: types.Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if user[4] != "admin":
        await message.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    cities = await get_cities()
    if not cities:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=name, callback_data=f"delete_city_{cid}")] for cid, name in cities]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)

@dp.callback_query(F.data.startswith("addprod_district_"))
async def add_product_choose_district(callback: types.CallbackQuery, state: FSMContext):
    district_id = int(callback.data.split("_")[-1])
    await state.update_data(district_id=district_id)
    await callback.message.answer("üõí –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProduct.waiting_for_name)
    await callback.answer()

@dp.message(AddProduct.waiting_for_name)
async def add_product_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AddProduct.waiting_for_description)

@dp.message(AddProduct.waiting_for_description)
async def add_product_desc(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text.strip())
    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ (–∫–∞–∫ —Ñ–æ—Ç–æ):")
    await state.set_state(AddProduct.waiting_for_photo)

@dp.message(AddProduct.waiting_for_photo, F.photo)
async def add_product_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo_id=photo_id)
    await message.answer("üíµ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, $USD):")
    await state.set_state(AddProduct.waiting_for_price)

@dp.message(AddProduct.waiting_for_photo)
async def add_product_photo_fail(message: types.Message, state: FSMContext):
    await message.answer("‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–∫ —Ñ–æ—Ç–æ.")

@dp.message(AddProduct.waiting_for_price)
async def add_product_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text.replace(",", "."))
        if price <= 0:
            raise ValueError
    except Exception:
        await message.answer("‚õî –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.")
        return
    await state.update_data(price=price)
    await message.answer("üíº –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")
    await state.set_state(AddProduct.waiting_for_product_text)

@dp.message(AddProduct.waiting_for_product_text)
async def add_product_final(message: types.Message, state: FSMContext):
    data = await state.get_data()
    await add_product(
        data["city_id"],
        data["district_id"],
        data["name"],
        data["description"],
        data["photo_id"],
        data["price"],
        ""  # product_text –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
    )
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π product_id
    async with aiosqlite.connect(DB_PATH) as db:
        cur = await db.execute(
            "SELECT id FROM products WHERE name = ? ORDER BY id DESC LIMIT 1",
            (data["name"],)
        )
        product_row = await cur.fetchone()
        product_id = product_row[0]
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
        items = [line.strip() for line in message.text.split("\n") if line.strip()]
        for item in items:
            await db.execute("INSERT INTO product_items (product_id, item_text) VALUES (?, ?)", (product_id, item))
        await db.commit()
    await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!\n–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(items)} —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤.")
    await state.clear()

@dp.message(F.text == "‚ûñ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def start_delete_product(message: types.Message, state: FSMContext):
    user = await get_user(message.from_user.id)
    if not user or user[4] != "admin":
        await message.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        return
    cities = await get_cities()
    if not cities:
        await message.answer("–ù–µ—Ç –≥–æ—Ä–æ–¥–æ–≤.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=name, callback_data=f"delprod_city_{cid}")] for cid, name in cities]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=kb)

# ---------------------- –¢–û–í–ê–†–´ –ò –ü–û–ö–£–ü–ö–ê ----------------------

@dp.message(F.text == "üõçÔ∏è –¢–æ–≤–∞—Ä—ã")
async def show_cities(message: types.Message):
    cities = await get_cities()
    if not cities:
        await message.answer("üîî–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–ª–∞–¥–æ–≤ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç! –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º–∏!üîî")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=f"üèôÔ∏è {name}", callback_data=f"show_city_{cid}")] for cid, name in cities]
    )
    await message.answer("üèôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=kb)

@dp.callback_query(F.data.startswith("show_city_"))
async def show_city(callback: types.CallbackQuery):
    city_id = int(callback.data.split("_")[-1])
    districts = await get_districts(city_id)
    if not districts:
        await callback.message.answer("üåÜ –í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç —Ä–∞–π–æ–Ω–æ–≤.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=f"üåÜ {name}", callback_data=f"show_district_{city_id}_{did}")] for did, name in districts]
    )
    await callback.message.answer("üåÜ –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=kb)
    await callback.answer()

@dp.callback_query(F.data.startswith("show_district_"))
async def show_district(callback: types.CallbackQuery):
    _, _, city_id, district_id = callback.data.split("_")
    city_id, district_id = int(city_id), int(district_id)
    products = await get_products(city_id, district_id)
    if not products:
        await callback.message.answer("‚ùå –í —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ –∫–ª–∞–¥–æ–≤ –Ω–µ—Ç.")
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(
            text=f"{name} (${price}) [{await items_count(pid)} —à—Ç.]", 
            callback_data=f"show_product_{pid}")] for pid, name, price in products]
    )
    await callback.message.answer("üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞–¥:", reply_markup=kb)
    await callback.answer()

@dp.callback_query(F.data.startswith("show_product_"))
async def show_product(callback: types.CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[-1])
    product = await get_product_full(product_id)
    if not product:
        await callback.message.answer("‚ùå –ö–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    pid, name, description, photo_id, price, product_text, city, district = product
    count = await items_count(product_id)
    text = (
        f"üõí <b>{name}</b>\n"
        f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {city}\n"
        f"üåÜ <b>–†–∞–π–æ–Ω:</b> {district}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {price} $USD\n"
        f"{description}"
    )
    user = await get_user(callback.from_user.id)
    buy_buttons = []
    if count > 0:
        buy_buttons.append([InlineKeyboardButton(text="üí∏ –ö—É–ø–∏—Ç—å", callback_data=f"buy_{pid}")])
    if user and user[4] == "admin":
        buy_buttons.append([InlineKeyboardButton(text="üß™ –ü–æ–¥–¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫—É (–∞–¥–º–∏–Ω)", callback_data=f"emulate_buy_{pid}")])
    kb = InlineKeyboardMarkup(inline_keyboard=buy_buttons)
    await callback.message.answer_photo(photo_id, caption=text, parse_mode="HTML", reply_markup=kb)
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data.startswith("emulate_buy_"))
async def emulate_buy(callback: types.CallbackQuery, state: FSMContext):
    user = await get_user(callback.from_user.id)
    if not user or user[4] != "admin":
        await callback.message.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø–æ–¥–¥–µ–ª–∫–∏ –ø–æ–∫—É–ø–∫–∏.")
        await callback.answer()
        return

    product_id = int(callback.data.split("_")[-1])
    item = await get_and_delete_product_item(product_id)
    if not item:
        await callback.message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞!")
        await callback.answer()
        return

    product = await get_product_full(product_id)
    if not product:
        await callback.message.answer("‚ùå –ö–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    pid, name, description, photo_id, price, product_text, city, district = product
    # –≠–º—É–ª–∏—Ä—É–µ–º –∑–∞–∫–∞–∑
    await update_user_orders_and_discount(callback.from_user.id, plus=1)
    await callback.message.answer(
        f"üß™ <b>–ü–æ–¥–¥–µ–ª–∫–∞ –ø–æ–∫—É–ø–∫–∏</b>\n\n"
        f"üõí <b>{name}</b>\n"
        f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {city}\n"
        f"üåÜ <b>–†–∞–π–æ–Ω:</b> {district}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {price} $USD\n\n"
        f"‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –í–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ! –ú—ã - –ª—É—á—à–∏–µ –≤ —Å–≤–æ–µ–º –¥–µ–ª–µ, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤, —É–¥–∞—á–Ω–æ–≥–æ —Ç—Ä–∏–ø–∞! –í–æ—Ç –≤–∞—à —Ç–æ–≤–∞—Ä:\n\n"
        f"{item}\n\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ",
        parse_mode="HTML"
    )
    await callback.answer("–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–¥–µ–ª–∞–Ω–∞!")

@dp.callback_query(F.data.startswith("delete_city_"))
async def delete_city_confirm(callback: types.CallbackQuery):
    city_id = int(callback.data.split("_")[-1])
    await delete_city(city_id)
    await callback.message.answer("–ì–æ—Ä–æ–¥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!", reply_markup=admin_panel())
    await callback.answer("–ì–æ—Ä–æ–¥ —É–¥–∞–ª—ë–Ω")

@dp.callback_query(F.data == "product_delete")
async def product_delete_inline(callback: CallbackQuery, state: FSMContext):
    user = await get_user(callback.from_user.id)
    if not user or user[4] != "admin":
        await callback.message.answer("‚õî –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.")
        await callback.answer()
        return
    cities = await get_cities()
    if not cities:
        await callback.message.answer("–ù–µ—Ç –≥–æ—Ä–æ–¥–æ–≤.")
        await callback.answer()
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=name, callback_data=f"delprod_city_{cid}")] for cid, name in cities]
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=kb)
    await callback.answer()

@dp.callback_query(F.data.startswith("delprod_city_"))
async def delprod_choose_city(callback: CallbackQuery, state: FSMContext):
    city_id = int(callback.data.split("_")[-1])
    districts = await get_districts(city_id)
    if not districts:
        await callback.message.answer("–í —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ –Ω–µ—Ç —Ä–∞–π–æ–Ω–æ–≤.")
        await callback.answer()
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=name, callback_data=f"delprod_district_{city_id}_{did}")] for did, name in districts]
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω:", reply_markup=kb)
    await callback.answer()

@dp.callback_query(F.data.startswith("delprod_district_"))
async def delprod_choose_district(callback: CallbackQuery, state: FSMContext):
    _, _, city_id, district_id = callback.data.split("_")
    city_id, district_id = int(city_id), int(district_id)
    products = await get_products(city_id, district_id)
    if not products:
        await callback.message.answer("–í —ç—Ç–æ–º —Ä–∞–π–æ–Ω–µ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç.")
        await callback.answer()
        return
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=f"{name} (${price})", callback_data=f"delprod_product_{pid}")] for pid, name, price in products]
    )
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=kb)
    await callback.answer()

@dp.callback_query(F.data.startswith("delprod_product_"))
async def delprod_delete(callback: CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[-1])
    await delete_product(product_id)
    await callback.message.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω.", reply_markup=admin_panel())
    await callback.answer()

# ---------------------- BTC PAYMENT FSM ----------------------

@dp.callback_query(F.data.startswith("buy_"))
async def buy_product_choose_method(callback: types.CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[-1])
    await state.update_data(product_id=product_id)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Çø BTC", callback_data="pay_btc")],
        [InlineKeyboardButton(text="ü™ô USDT (—Å–∫–æ—Ä–æ)", callback_data="pay_usdt")],
        [InlineKeyboardButton(text="üïµÔ∏è Monero (—Å–∫–æ—Ä–æ)", callback_data="pay_xmr")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_product")]
    ])
    await callback.message.answer("üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=kb)
    await state.set_state(BuyProduct.waiting_for_payment_method)
    await callback.answer()

@dp.callback_query(F.data == "pay_usdt")
async def pay_usdt_soon(callback: types.CallbackQuery):
    await callback.message.answer("ü™ô –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ USDT —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ üòâ")
    await callback.answer()

@dp.callback_query(F.data == "pay_xmr")
async def pay_xmr_soon(callback: types.CallbackQuery):
    await callback.message.answer("üïµÔ∏è –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Monero —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ üòâ")
    await callback.answer()

@dp.callback_query(F.data == "back_to_product")
async def back_to_product(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data.get("product_id"):
        await callback.answer()
        return
    product = await get_product_full(data["product_id"])
    if not product:
        await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    pid, name, description, photo_id, price, product_text, city, district = product
    count = await items_count(pid)
    text = (
        f"üõí <b>{name}</b>\n"
        f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {city}\n"
        f"üåÜ <b>–†–∞–π–æ–Ω:</b> {district}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {price} $USD\n"
        f"üì¶ <b>–í –Ω–∞–ª–∏—á–∏–∏:</b> {count} —à—Ç.\n\n"
        f"{description}"
    )
    user = await get_user(callback.from_user.id)
    buy_buttons = []
    if count > 0:
        buy_buttons.append([InlineKeyboardButton(text="üí∏ –ö—É–ø–∏—Ç—å", callback_data=f"buy_{pid}")])
    if user and user[4] == "admin":
        buy_buttons.append([InlineKeyboardButton(text="üß™ –≠–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫—É (–∞–¥–º–∏–Ω)", callback_data=f"emulate_buy_{pid}")])
    kb = InlineKeyboardMarkup(inline_keyboard=buy_buttons)
    await callback.message.answer_photo(photo_id, caption=text, parse_mode="HTML", reply_markup=kb)
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data == "pay_btc")
async def pay_btc(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    user = await get_user(user_id)
    data = await state.get_data()
    product_id = data.get("product_id")
    product = await get_product_full(product_id)
    if not product:
        await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    pid, name, description, photo_id, price_usd, product_text, city, district = product

    # –°–∫–∏–¥–∫–∞
    discount = user[3] if user else 0
    price_usd_discounted = round(price_usd - (price_usd * discount / 100), 2)

    async with aiohttp.ClientSession() as session:
        headers = {"X-CMC_PRO_API_KEY": COINMARKETCAP_API_KEY}
        async with session.get("https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?symbol=BTC", headers=headers) as resp:
            data_resp = await resp.json()
            btc_price = float(data_resp["data"]["BTC"]["quote"]["USD"]["price"])

    unique_usd = price_usd_discounted + round(random.uniform(0.01, 2.00), 2)
    unique_btc = round(unique_usd / btc_price, 8)
    unique_btc_str = f"{unique_btc:.8f}"

    payment_id = f"{user_id}:{product_id}"
    pending_payments[payment_id] = {
        "btc": unique_btc,
        "btc_str": unique_btc_str,
        "expire": time.time() + 20 * 60,
        "product_text": product_text,
        "usd": unique_usd
    }

    payment_info = (
        f"üõí <b>{name}</b>\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {city}\n"
        f"üåÜ –†–∞–π–æ–Ω: {district}\n"
        f"üíµ –¶–µ–Ω–∞: {price_usd} $USD\n"
        f"üí∏ –í–∞—à–∞ —Ü–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π: <b>{price_usd_discounted} USD</b> (—Å–∫–∏–¥–∫–∞ {discount}%)\n\n"
        f"‚ö° <b>–î–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω–æ <code>{unique_btc_str} BTC</code> –Ω–∞ –∞–¥—Ä–µ—Å:</b>\n"
        f"<code>{BTC_ADDRESS}</code>\n\n"
        f"‚ùó –°—É–º–º–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞, –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ <b>—Ä–æ–≤–Ω–æ —Ç–∞–∫–æ–π —Å—É–º–º—ã</b> –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç.\n"
        f"‚è∞ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏."
    )
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_btc_payment")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_product")]
    ])
    await callback.message.answer(payment_info, parse_mode="HTML", reply_markup=kb)
    await state.set_state(BuyProduct.waiting_for_payment)
    await callback.answer()

@dp.callback_query(F.data == "check_btc_payment")
async def check_btc_payment(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    product_id = data.get("product_id")
    payment_id = f"{user_id}:{product_id}"

    payment = pending_payments.get(payment_id)
    if not payment:
        await callback.message.answer("‚åõ –°–µ—Å—Å–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        await callback.answer()
        return

    if time.time() > payment["expire"]:
        await callback.message.answer("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É —Å–Ω–æ–≤–∞.")
        pending_payments.pop(payment_id, None)
        await state.clear()
        await callback.answer()
        return

    btc_addr = BTC_ADDRESS
    btc_amount = payment["btc"]
    btc_amount_str = payment["btc_str"]

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Blockchain.com API ---
    async with aiohttp.ClientSession() as session:
        async with session.get(f"https://blockchain.info/rawaddr/{btc_addr}?limit=50") as resp:
            if resp.status != 200:
                await callback.message.answer("‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                await callback.answer()
                return
            data_resp = await resp.json()
    txs = data_resp.get("txs", [])
    found = False
    for tx in txs:
        for out in tx.get("out", []):
            if out.get("addr", "") == btc_addr:
                value_btc = round(out.get("value", 0) / 1e8, 8)
                if abs(value_btc - btc_amount) < 1e-8:
                    found = True
                    break
        if found:
            break

    if found:
        # –í—ã–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä
        item = await get_and_delete_product_item(product_id)
        if not item:
            await callback.message.answer("‚ùå –£–≤—ã, —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!")
            await state.clear()
            return
        await update_user_orders_and_discount(user_id, plus=1)
        await callback.message.answer(
        f"üß™ <b>–ü–æ–¥–¥–µ–ª–∫–∞ –ø–æ–∫—É–ø–∫–∏</b>\n\n"
        f"üõí <b>{name}</b>\n"
        f"üèôÔ∏è <b>–ì–æ—Ä–æ–¥:</b> {city}\n"
        f"üåÜ <b>–†–∞–π–æ–Ω:</b> {district}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {price} $USD\n\n"
        f"‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –í–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ! –ú—ã - –ª—É—á—à–∏–µ –≤ —Å–≤–æ–µ–º –¥–µ–ª–µ, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤, —É–¥–∞—á–Ω–æ–≥–æ —Ç—Ä–∏–ø–∞! –í–æ—Ç –≤–∞—à —Ç–æ–≤–∞—Ä:\n\n"
        f"{item}\n\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ",
        parse_mode="HTML"
    )
        pending_payments.pop(payment_id, None)
        await state.clear()
    else:
        await callback.message.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω!\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ <b>—Ä–æ–≤–Ω–æ</b> —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", parse_mode="HTML", reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_btc_payment")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_product")]
        ]))
    await callback.answer()

# ---------------------- –ú–ï–õ–ö–ò–ï –•–ï–ù–î–õ–ï–†–´ ----------------------

@dp.message(F.text == "‚≠ê –û—Ç–∑—ã–≤—ã")
async def otzyvy_handler(message: types.Message):
    await message.answer(
        "–í –¥–∞–Ω–Ω–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º–º-–∫–∞–Ω–∞–ª–µ –í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤ :)\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑ –Ω–∏—Ö!\n"
        "t.me/otzyvy_zdes"
    )

@dp.message(F.text == "üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support_handler(message: types.Message):
    await message.answer(
        "–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∑–∞–∫–∞–∑–æ–º, –ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º —Å –æ–ø–ª–∞—Ç–æ–π –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É!\n"
        "@ImMathewBTW"
    )

@dp.message(F.text == "üìú –ü—Ä–∞–≤–∏–ª–∞")
async def rules_handler(message: types.Message):
    await message.answer(
        "*–ó–¥–µ—Å—å –±—É–¥—É—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –º–∞–≥–∞–∑–∏–Ω–∞*"
    )

@dp.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_menu(message: types.Message):
    await message.answer("üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_menu)

# ---------------------- MAIN ----------------------

async def main():
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
